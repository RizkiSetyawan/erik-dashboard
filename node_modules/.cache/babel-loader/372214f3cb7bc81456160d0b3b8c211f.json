{"ast":null,"code":"import _regeneratorRuntime from \"/Users/rizki/Documents/work/dashboard-erik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/rizki/Documents/work/dashboard-erik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/rizki/Documents/work/dashboard-erik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/rizki/Documents/work/dashboard-erik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/rizki/Documents/work/dashboard-erik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/rizki/Documents/work/dashboard-erik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/rizki/Documents/work/dashboard-erik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/rizki/Documents/work/dashboard-erik/src/views/Dashboard/components/OrdersTable/index.jsx\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom'; // Externals\n\nimport classNames from 'classnames';\nimport compose from 'recompose/compose';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types'; // Material helpers\n\nimport { withStyles } from '@material-ui/core/styles'; // Material components\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown'; // Shared services\n\nimport { getOrders as _getOrders } from 'services/order'; // Shared components\n\nimport Portlet from 'components/Portlet';\nimport PortletHeader from 'components/PortletHeader';\nimport PortletLabel from 'components/PortletLabel';\nimport PortletToolbar from 'components/PortletToolbar';\nimport PortletContent from 'components/PortletContent';\nimport Status from 'components/Status'; // Component styles\n\nimport styles from './styles';\nvar statusColors = {\n  delivered: 'success',\n  pending: 'info',\n  refund: 'danger'\n};\n\nvar OrdersTable =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(OrdersTable, _Component);\n\n  function OrdersTable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, OrdersTable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(OrdersTable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.signal = false;\n    _this.state = {\n      isLoading: false,\n      limit: 10,\n      orders: [],\n      ordersTotal: 0\n    };\n\n    _this.handleClick = function (id) {\n      var history = _this.props.history;\n      history.push(\"/orders/\".concat(id));\n    };\n\n    return _this;\n  }\n\n  _createClass(OrdersTable, [{\n    key: \"getOrders\",\n    value: function () {\n      var _getOrders2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(limit) {\n        var _ref, orders, ordersTotal;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                this.setState({\n                  isLoading: true\n                });\n                _context.next = 4;\n                return _getOrders(limit);\n\n              case 4:\n                _ref = _context.sent;\n                orders = _ref.orders;\n                ordersTotal = _ref.ordersTotal;\n\n                if (this.signal) {\n                  this.setState({\n                    isLoading: false,\n                    orders: orders,\n                    ordersTotal: ordersTotal\n                  });\n                }\n\n                _context.next = 13;\n                break;\n\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](0);\n\n                if (this.signal) {\n                  this.setState({\n                    isLoading: false,\n                    error: _context.t0\n                  });\n                }\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 10]]);\n      }));\n\n      function getOrders(_x) {\n        return _getOrders2.apply(this, arguments);\n      }\n\n      return getOrders;\n    }()\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.signal = true;\n      var limit = this.state.limit;\n      this.getOrders(limit);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.signal = false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          className = _this$props.className;\n      var _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          orders = _this$state.orders,\n          ordersTotal = _this$state.ordersTotal;\n      var rootClassName = classNames(classes.root, className);\n      var showOrders = !isLoading && orders.length > 0;\n      return React.createElement(Portlet, {\n        className: rootClassName,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, React.createElement(PerfectScrollbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(PortletHeader, {\n        className: classes.portletHeader,\n        noDivider: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(PortletLabel, {\n        subtitle: \"\".concat(ordersTotal, \" total\"),\n        title: \"Latest Orders\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(PortletToolbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        variant: \"body2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, \"Sort by:\"), React.createElement(Button, {\n        className: classes.sortButton,\n        size: \"small\",\n        variant: \"text\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"Newest\", React.createElement(ArrowDropDownIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      })), React.createElement(Button, {\n        className: classes.newEntryButton,\n        color: \"primary\",\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"New entry\"))), React.createElement(PortletContent, {\n        className: classes.portletContent,\n        noPadding: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, isLoading && React.createElement(\"div\", {\n        className: classes.progressWrapper,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, React.createElement(CircularProgress, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      })), showOrders && React.createElement(Table, {\n        className: classes.table,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144\n        },\n        __self: this\n      }, React.createElement(TableHead, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \"Order ID\"), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, \"Customer\"), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"Date\"), React.createElement(TableCell, {\n        align: \"left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, \"Status\"))), React.createElement(TableBody, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, orders.map(function (order) {\n        return React.createElement(TableRow, {\n          className: classes.tableRow,\n          hover: true,\n          key: order.id,\n          onClick: function onClick() {\n            return _this2.handleClick(order.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155\n          },\n          __self: this\n        }, React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, order.id), React.createElement(TableCell, {\n          className: classes.customerCell,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, order.customer.name), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, moment(order.createdAt).format('DD/MM/YYYY')), React.createElement(TableCell, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: classes.statusWrapper,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169\n          },\n          __self: this\n        }, React.createElement(Status, {\n          className: classes.status,\n          color: statusColors[order.status],\n          size: \"sm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }), order.status)));\n      }))))));\n    }\n  }]);\n\n  return OrdersTable;\n}(Component);\n\nOrdersTable.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\nexport default compose(withRouter, withStyles(styles))(OrdersTable);","map":{"version":3,"sources":["/Users/rizki/Documents/work/dashboard-erik/src/views/Dashboard/components/OrdersTable/index.jsx"],"names":["React","Component","withRouter","classNames","compose","moment","PerfectScrollbar","PropTypes","withStyles","Button","CircularProgress","Table","TableBody","TableCell","TableHead","TableRow","Typography","ArrowDropDownIcon","getOrders","Portlet","PortletHeader","PortletLabel","PortletToolbar","PortletContent","Status","styles","statusColors","delivered","pending","refund","OrdersTable","signal","state","isLoading","limit","orders","ordersTotal","handleClick","id","history","props","push","setState","error","classes","className","rootClassName","root","showOrders","length","portletHeader","sortButton","newEntryButton","portletContent","progressWrapper","table","map","order","tableRow","customerCell","customer","name","createdAt","format","statusWrapper","status","propTypes","string","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\n\n// Externals\nimport classNames from 'classnames';\nimport compose from 'recompose/compose';\nimport moment from 'moment';\nimport PerfectScrollbar from 'react-perfect-scrollbar';\nimport PropTypes from 'prop-types';\n\n// Material helpers\nimport { withStyles } from '@material-ui/core/styles';\n\n// Material components\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\n\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\n\n// Shared services\nimport { getOrders } from 'services/order';\n\n// Shared components\nimport Portlet from 'components/Portlet';\nimport PortletHeader from 'components/PortletHeader';\nimport PortletLabel from 'components/PortletLabel';\nimport PortletToolbar from 'components/PortletToolbar';\nimport PortletContent from 'components/PortletContent';\nimport Status from 'components/Status';\n\n// Component styles\nimport styles from './styles';\n\nconst statusColors = {\n  delivered: 'success',\n  pending: 'info',\n  refund: 'danger'\n};\n\nclass OrdersTable extends Component {\n  signal = false;\n\n  state = {\n    isLoading: false,\n    limit: 10,\n    orders: [],\n    ordersTotal: 0\n  };\n\n  async getOrders(limit) {\n    try {\n      this.setState({ isLoading: true });\n\n      const { orders, ordersTotal } = await getOrders(limit);\n\n      if (this.signal) {\n        this.setState({\n          isLoading: false,\n          orders,\n          ordersTotal\n        });\n      }\n    } catch (error) {\n      if (this.signal) {\n        this.setState({\n          isLoading: false,\n          error\n        });\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.signal = true;\n\n    const { limit } = this.state;\n\n    this.getOrders(limit);\n  }\n\n  componentWillUnmount() {\n    this.signal = false;\n  }\n\n  handleClick = id => {\n    const { history } = this.props;\n\n    history.push(`/orders/${id}`);\n  };\n\n  render() {\n    const { classes, className } = this.props;\n    const { isLoading, orders, ordersTotal } = this.state;\n\n    const rootClassName = classNames(classes.root, className);\n    const showOrders = !isLoading && orders.length > 0;\n\n    return (\n      <Portlet className={rootClassName}>\n        <PerfectScrollbar>\n          <PortletHeader\n            className={classes.portletHeader}\n            noDivider\n          >\n            <PortletLabel\n              subtitle={`${ordersTotal} total`}\n              title=\"Latest Orders\"\n            />\n            <PortletToolbar>\n              <Typography variant=\"body2\">Sort by:</Typography>\n              <Button\n                className={classes.sortButton}\n                size=\"small\"\n                variant=\"text\"\n              >\n                Newest\n                <ArrowDropDownIcon />\n              </Button>\n              <Button\n                className={classes.newEntryButton}\n                color=\"primary\"\n                variant=\"outlined\"\n              >\n                New entry\n              </Button>\n            </PortletToolbar>\n          </PortletHeader>\n          <PortletContent\n            className={classes.portletContent}\n            noPadding\n          >\n            {isLoading && (\n              <div className={classes.progressWrapper}>\n                <CircularProgress />\n              </div>\n            )}\n            {showOrders && (\n              <Table className={classes.table}>\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Order ID</TableCell>\n                    <TableCell align=\"left\">Customer</TableCell>\n                    <TableCell align=\"left\">Date</TableCell>\n                    <TableCell align=\"left\">Status</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {orders.map(order => (\n                    <TableRow\n                      className={classes.tableRow}\n                      hover\n                      key={order.id}\n                      onClick={() => this.handleClick(order.id)}\n                    >\n                      <TableCell>{order.id}</TableCell>\n                      <TableCell className={classes.customerCell}>\n                        {order.customer.name}\n                      </TableCell>\n                      <TableCell>\n                        {moment(order.createdAt).format('DD/MM/YYYY')}\n                      </TableCell>\n                      <TableCell>\n                        <div className={classes.statusWrapper}>\n                          <Status\n                            className={classes.status}\n                            color={statusColors[order.status]}\n                            size=\"sm\"\n                          />\n                          {order.status}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </PortletContent>\n        </PerfectScrollbar>\n      </Portlet>\n    );\n  }\n}\n\nOrdersTable.propTypes = {\n  className: PropTypes.string,\n  classes: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired\n};\n\nexport default compose(\n  withRouter,\n  withStyles(styles)\n)(OrdersTable);\n"]},"metadata":{},"sourceType":"module"}