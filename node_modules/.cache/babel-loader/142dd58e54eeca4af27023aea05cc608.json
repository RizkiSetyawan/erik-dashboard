{"ast":null,"code":"import _slicedToArray from \"/Users/rizki/Downloads/dasboard-material/new-dashboard/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/rizki/Downloads/dasboard-material/new-dashboard/src/views/Dashboard/components/DropComponent/index.jsx\";\nimport React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDrop } from \"react-dnd\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Cancel from '@material-ui/icons/Cancel';\nimport Typography from '@material-ui/core/Typography';\nconst useStyles = makeStyles({\n  cardNoItem: {\n    outline: \"1.5px dashed gray\",\n    outlineOffset: \"-7px\",\n    height: \"16rem\",\n    width: \"16rem\",\n    margin: \"0 0 1.5rem 0\",\n    color: \"black\",\n    padding: \"1rem\",\n    textAlign: \"center\",\n    fontSize: \"1rem\",\n    lineHeight: \"normal\",\n    float: \"left\",\n    wordWrap: \"break-word\",\n    alignItems: \"center\"\n  },\n  cardFilled: {\n    height: \"16rem\",\n    width: \"16rem\",\n    margin: \"0 0 1.5rem 0\",\n    color: \"black\",\n    textAlign: \"center\",\n    fontSize: \"1rem\",\n    lineHeight: \"normal\",\n    float: \"left\",\n    wordWrap: \"break-word\",\n    alignItems: \"center\",\n    boxShadow: \"0 0.5rem 1rem rgba(0, 0, 0, 0.2)\",\n    backgroundColor: \"rgb(65, 86, 181, 0.2)\"\n  },\n  cardheader: {\n    textAlign: \"left\"\n  },\n  title: {\n    color: \"grey\",\n    fontSize: \"1.2rem\"\n  },\n  titleActive: {\n    color: \"white\",\n    fontSize: \"1.2rem\"\n  }\n});\n\nconst DropComponent = ({\n  accept,\n  lastDroppedItem,\n  onDrop,\n  onCancel\n}) => {\n  const classes = useStyles();\n\n  const _useDrop = useDrop({\n    accept,\n    drop: onDrop,\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  }),\n        _useDrop2 = _slicedToArray(_useDrop, 2),\n        _useDrop2$ = _useDrop2[0],\n        isOver = _useDrop2$.isOver,\n        canDrop = _useDrop2$.canDrop,\n        drop = _useDrop2[1];\n\n  const isActive = isOver && canDrop;\n  let backgroundColor = \"#f7f7f7\";\n\n  if (isActive) {\n    backgroundColor = \"darkgreen\";\n  } else if (canDrop) {\n    backgroundColor = \"darkkhaki\";\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, !lastDroppedItem && React.createElement(Card, {\n    className: classes.cardNoItem,\n    ref: drop,\n    style: {\n      backgroundColor\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, isActive ? React.createElement(Typography, {\n    className: classes.titleActive,\n    color: \"textPrimary\",\n    component: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Release to drop\") : React.createElement(Typography, {\n    className: classes.title,\n    color: \"textPrimary\",\n    component: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Drop item here.\"))), lastDroppedItem && React.createElement(Card, {\n    className: classes.cardFilled,\n    ref: drop,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, React.createElement(CardHeader, {\n    className: classes.cardheader,\n    title: lastDroppedItem.name,\n    action: React.createElement(IconButton, {\n      \"aria-label\": \"Cancel\",\n      onClick: onCancel,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Cancel, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }), React.createElement(CardContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, lastDroppedItem && React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Last dropped: \", JSON.stringify(lastDroppedItem.name + \" \" + lastDroppedItem.type)))));\n};\n\nexport default DropComponent;","map":{"version":3,"sources":["/Users/rizki/Downloads/dasboard-material/new-dashboard/src/views/Dashboard/components/DropComponent/index.jsx"],"names":["React","makeStyles","useDrop","Card","CardContent","CardHeader","IconButton","Cancel","Typography","useStyles","cardNoItem","outline","outlineOffset","height","width","margin","color","padding","textAlign","fontSize","lineHeight","float","wordWrap","alignItems","cardFilled","boxShadow","backgroundColor","cardheader","title","titleActive","DropComponent","accept","lastDroppedItem","onDrop","onCancel","classes","drop","collect","monitor","isOver","canDrop","isActive","name","JSON","stringify","type"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDrop } from \"react-dnd\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport IconButton from '@material-ui/core/IconButton';\nimport Cancel from '@material-ui/icons/Cancel';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles({\n  cardNoItem: {\n    outline: \"1.5px dashed gray\",\n    outlineOffset: \"-7px\",\n    height: \"16rem\",\n    width: \"16rem\",\n    margin: \"0 0 1.5rem 0\",\n    color: \"black\",\n    padding: \"1rem\",\n    textAlign: \"center\",\n    fontSize: \"1rem\",\n    lineHeight: \"normal\",\n    float: \"left\",\n    wordWrap: \"break-word\",\n    alignItems: \"center\"\n  },\n  cardFilled: {\n    height: \"16rem\",\n    width: \"16rem\",\n    margin: \"0 0 1.5rem 0\",\n    color: \"black\",\n    textAlign: \"center\",\n    fontSize: \"1rem\",\n    lineHeight: \"normal\",\n    float: \"left\",\n    wordWrap: \"break-word\",\n    alignItems: \"center\",\n    boxShadow: \"0 0.5rem 1rem rgba(0, 0, 0, 0.2)\",\n    backgroundColor : \"rgb(65, 86, 181, 0.2)\"\n\n  },\n  cardheader: {\n    textAlign: \"left\",\n  },\n  title: {\n    color: \"grey\",\n    fontSize: \"1.2rem\",\n  },\n  titleActive: {\n    color: \"white\",\n    fontSize: \"1.2rem\",\n  },\n});\n\nconst DropComponent = ({ accept, lastDroppedItem, onDrop, onCancel }) => {\n\n  const classes = useStyles();\n\n  const [{ isOver, canDrop }, drop] = useDrop({\n    accept,\n    drop: onDrop,\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop()\n    })\n  });\n\n  const isActive = isOver && canDrop;\n  let backgroundColor = \"#f7f7f7\";\n  if (isActive) {\n    backgroundColor = \"darkgreen\";\n  } else if (canDrop) {\n    backgroundColor = \"darkkhaki\";\n  }\n\n\n    return (\n      <div>\n      {!lastDroppedItem && (\n        <Card className={classes.cardNoItem} ref={drop} style={{ backgroundColor }}>\n          <CardHeader\n          />\n          <CardContent>\n            {isActive\n              ?\n              <Typography className={classes.titleActive} color=\"textPrimary\" component=\"p\">\n                Release to drop\n              </Typography>\n              :\n              <Typography className={classes.title} color=\"textPrimary\" component=\"p\">\n              Drop item here.\n              </Typography>}\n          </CardContent>\n        </Card>\n      )}\n      {lastDroppedItem && (\n        <Card className={classes.cardFilled} ref={drop}>\n          <CardHeader className={classes.cardheader}\n            title={lastDroppedItem.name}\n            action={\n              <IconButton aria-label=\"Cancel\" onClick={onCancel}>\n                <Cancel />\n              </IconButton>\n            }\n          />\n          <CardContent>\n            {lastDroppedItem && (\n              <p>Last dropped: {JSON.stringify(lastDroppedItem.name + \" \" + lastDroppedItem.type)}</p>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n    );\n  }\n\nexport default DropComponent\n"]},"metadata":{},"sourceType":"module"}