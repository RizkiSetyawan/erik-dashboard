{"ast":null,"code":"// Mock data\nimport users from 'data/users';\nimport orders from 'data/orders';\n\nfunction lookupUser(user) {\n  var userCopy = JSON.parse(JSON.stringify(user));\n  var userOrders = userCopy.orders.map(function (id) {\n    return orders.find(function (order) {\n      return order.id === id;\n    });\n  });\n  var userMoneySpent = userCopy.orders.reduce(function (total, order) {\n    return total + order.amount;\n  }, 0);\n  userCopy.orders = userOrders;\n  userCopy.moneySpent = userMoneySpent;\n  return userCopy;\n}\n\nexport var getUsers = function getUsers() {\n  var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;\n  return new Promise(function (resolve) {\n    setTimeout(function () {\n      var usersLookup = users.slice(0, limit).map(lookupUser);\n      resolve({\n        users: usersLookup,\n        usersTotal: users.length\n      });\n    }, 700);\n  });\n};\nexport var getUser = function getUser(id) {\n  return new Promise(function (resolve, reject) {\n    setTimeout(function () {\n      var user = users.find(function (user) {\n        return user.id === id;\n      });\n\n      if (user) {\n        resolve({\n          user: lookupUser(user)\n        });\n      } else {\n        reject({\n          error: 'User not found'\n        });\n      }\n    }, 500);\n  });\n};","map":{"version":3,"sources":["/Users/rizki/Downloads/dasboard-material/new-dashboard/src/services/user/index.js"],"names":["users","orders","lookupUser","user","userCopy","JSON","parse","stringify","userOrders","map","id","find","order","userMoneySpent","reduce","total","amount","moneySpent","getUsers","limit","Promise","resolve","setTimeout","usersLookup","slice","usersTotal","length","getUser","reject","error"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,YAAlB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeJ,IAAf,CAAX,CAAjB;AACA,MAAMK,UAAU,GAAGJ,QAAQ,CAACH,MAAT,CAAgBQ,GAAhB,CAAoB,UAAAC,EAAE;AAAA,WACvCT,MAAM,CAACU,IAAP,CAAY,UAAAC,KAAK;AAAA,aAAIA,KAAK,CAACF,EAAN,KAAaA,EAAjB;AAAA,KAAjB,CADuC;AAAA,GAAtB,CAAnB;AAGA,MAAMG,cAAc,GAAGT,QAAQ,CAACH,MAAT,CAAgBa,MAAhB,CACrB,UAACC,KAAD,EAAQH,KAAR;AAAA,WAAkBG,KAAK,GAAGH,KAAK,CAACI,MAAhC;AAAA,GADqB,EAErB,CAFqB,CAAvB;AAKAZ,EAAAA,QAAQ,CAACH,MAAT,GAAkBO,UAAlB;AACAJ,EAAAA,QAAQ,CAACa,UAAT,GAAsBJ,cAAtB;AAEA,SAAOT,QAAP;AACD;;AAED,OAAO,IAAMc,QAAQ,GAAG,SAAXA,QAAW,GAAgB;AAAA,MAAfC,KAAe,uEAAP,EAAO;AACtC,SAAO,IAAIC,OAAJ,CAAY,UAAAC,OAAO,EAAI;AAC5BC,IAAAA,UAAU,CAAC,YAAM;AACf,UAAMC,WAAW,GAAGvB,KAAK,CAACwB,KAAN,CAAY,CAAZ,EAAeL,KAAf,EAAsBV,GAAtB,CAA0BP,UAA1B,CAApB;AAEAmB,MAAAA,OAAO,CAAC;AACNrB,QAAAA,KAAK,EAAEuB,WADD;AAENE,QAAAA,UAAU,EAAEzB,KAAK,CAAC0B;AAFZ,OAAD,CAAP;AAID,KAPS,EAOP,GAPO,CAAV;AAQD,GATM,CAAP;AAUD,CAXM;AAaP,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAAAjB,EAAE,EAAI;AAC3B,SAAO,IAAIU,OAAJ,CAAY,UAACC,OAAD,EAAUO,MAAV,EAAqB;AACtCN,IAAAA,UAAU,CAAC,YAAM;AACf,UAAMnB,IAAI,GAAGH,KAAK,CAACW,IAAN,CAAW,UAAAR,IAAI;AAAA,eAAIA,IAAI,CAACO,EAAL,KAAYA,EAAhB;AAAA,OAAf,CAAb;;AAEA,UAAIP,IAAJ,EAAU;AACRkB,QAAAA,OAAO,CAAC;AACNlB,UAAAA,IAAI,EAAED,UAAU,CAACC,IAAD;AADV,SAAD,CAAP;AAGD,OAJD,MAIO;AACLyB,QAAAA,MAAM,CAAC;AACLC,UAAAA,KAAK,EAAE;AADF,SAAD,CAAN;AAGD;AACF,KAZS,EAYP,GAZO,CAAV;AAaD,GAdM,CAAP;AAeD,CAhBM","sourcesContent":["// Mock data\nimport users from 'data/users';\nimport orders from 'data/orders';\n\nfunction lookupUser(user) {\n  const userCopy = JSON.parse(JSON.stringify(user));\n  const userOrders = userCopy.orders.map(id =>\n    orders.find(order => order.id === id)\n  );\n  const userMoneySpent = userCopy.orders.reduce(\n    (total, order) => total + order.amount,\n    0\n  );\n\n  userCopy.orders = userOrders;\n  userCopy.moneySpent = userMoneySpent;\n\n  return userCopy;\n}\n\nexport const getUsers = (limit = 10) => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      const usersLookup = users.slice(0, limit).map(lookupUser);\n\n      resolve({\n        users: usersLookup,\n        usersTotal: users.length\n      });\n    }, 700);\n  });\n};\n\nexport const getUser = id => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const user = users.find(user => user.id === id);\n\n      if (user) {\n        resolve({\n          user: lookupUser(user)\n        });\n      } else {\n        reject({\n          error: 'User not found'\n        });\n      }\n    }, 500);\n  });\n};\n"]},"metadata":{},"sourceType":"module"}