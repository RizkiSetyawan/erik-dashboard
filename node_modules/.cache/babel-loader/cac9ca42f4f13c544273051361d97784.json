{"ast":null,"code":"import _slicedToArray from \"/Users/rizki/Documents/work/dashboard-erik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/Users/rizki/Documents/work/dashboard-erik/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/rizki/Documents/work/dashboard-erik/src/components/Snackbar/SnackbarComponent.jsx\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\nvar variantIcon = {\n  success: CheckCircleIcon,\n  warning: WarningIcon,\n  error: ErrorIcon,\n  info: InfoIcon\n};\nvar useStyles1 = makeStyles(function (theme) {\n  return {\n    success: {\n      backgroundColor: green[600]\n    },\n    error: {\n      backgroundColor: theme.palette.error.dark\n    },\n    info: {\n      backgroundColor: theme.palette.primary.main\n    },\n    warning: {\n      backgroundColor: amber[700]\n    },\n    icon: {\n      fontSize: 20\n    },\n    iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing(1)\n    },\n    message: {\n      display: 'flex',\n      alignItems: 'center'\n    }\n  };\n});\n\nfunction MySnackbarContentWrapper(props) {\n  var classes = useStyles1();\n\n  var className = props.className,\n      message = props.message,\n      onClose = props.onClose,\n      variant = props.variant,\n      other = _objectWithoutProperties(props, [\"className\", \"message\", \"onClose\", \"variant\"]);\n\n  var Icon = variantIcon[variant];\n  return React.createElement(SnackbarContent, Object.assign({\n    className: clsx(classes[variant], className),\n    \"aria-describedby\": \"client-snackbar\",\n    message: React.createElement(\"span\", {\n      id: \"client-snackbar\",\n      className: classes.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      className: clsx(classes.icon, classes.iconVariant),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }), message),\n    action: [React.createElement(IconButton, {\n      key: \"close\",\n      \"aria-label\": \"close\",\n      color: \"inherit\",\n      onClick: onClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(CloseIcon, {\n      className: classes.icon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }))]\n  }, other, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n}\n\nMySnackbarContentWrapper.propTypes = {\n  className: PropTypes.string,\n  message: PropTypes.string,\n  onClose: PropTypes.func,\n  variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired\n};\nexport default function SnackbarComponent() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      open = _React$useState2[0],\n      setOpen = _React$useState2[1]; // const handleClick = () => {\n  //    setOpen(true)\n  // }\n  // const handleClose = (event, reason) => {\n  //    if (reason === 'clickaway') {\n  //       return;\n  //    }\n  //    setOpen(false)\n  // }\n\n\n  return React.createElement(Snackbar, {\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'left'\n    },\n    open: open,\n    autoHideDuration: 3000,\n    onClose: handleClose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(MySnackbarContentWrapper, {\n    onClose: handleClose,\n    variant: \"success\",\n    message: \"This is a success message!\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }));\n}","map":{"version":3,"sources":["/Users/rizki/Documents/work/dashboard-erik/src/components/Snackbar/SnackbarComponent.jsx"],"names":["React","PropTypes","clsx","CheckCircleIcon","ErrorIcon","InfoIcon","CloseIcon","amber","green","IconButton","Snackbar","SnackbarContent","WarningIcon","makeStyles","variantIcon","success","warning","error","info","useStyles1","theme","backgroundColor","palette","dark","primary","main","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","props","classes","className","onClose","variant","other","Icon","propTypes","string","func","oneOf","isRequired","SnackbarComponent","useState","open","setOpen","vertical","horizontal","handleClose"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { amber, green } from '@material-ui/core/colors';\nimport IconButton from '@material-ui/core/IconButton';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst variantIcon = {\n   success: CheckCircleIcon,\n   warning: WarningIcon,\n   error: ErrorIcon,\n   info: InfoIcon,\n};\n\nconst useStyles1 = makeStyles(theme => ({\n   success: {\n      backgroundColor: green[600],\n   },\n   error: {\n      backgroundColor: theme.palette.error.dark,\n   },\n   info: {\n      backgroundColor: theme.palette.primary.main,\n   },\n   warning: {\n      backgroundColor: amber[700],\n   },\n   icon: {\n      fontSize: 20,\n   },\n   iconVariant: {\n      opacity: 0.9,\n      marginRight: theme.spacing(1),\n   },\n   message: {\n      display: 'flex',\n      alignItems: 'center',\n   },\n}));\n\nfunction MySnackbarContentWrapper(props) {\n   const classes = useStyles1()\n   const { className, message, onClose, variant, ...other } = props\n   const Icon = variantIcon[variant]\n\n   return (\n      <SnackbarContent\n         className={clsx(classes[variant], className)}\n         aria-describedby=\"client-snackbar\"\n         message={\n            <span id=\"client-snackbar\" className={classes.message}>\n               <Icon className={clsx(classes.icon, classes.iconVariant)} />\n               {message}\n            </span>\n         }\n         action={[\n            <IconButton key=\"close\" aria-label=\"close\" color=\"inherit\" onClick={onClose}>\n               <CloseIcon className={classes.icon} />\n            </IconButton>,\n         ]}\n         {...other}\n      />\n   )\n}\n\nMySnackbarContentWrapper.propTypes = {\n   className: PropTypes.string,\n   message: PropTypes.string,\n   onClose: PropTypes.func,\n   variant: PropTypes.oneOf(['error', 'info', 'success', 'warning']).isRequired,\n}\n\nexport default function SnackbarComponent() {\n   const [open, setOpen] = React.useState(false);\n\n   // const handleClick = () => {\n   //    setOpen(true)\n   // }\n\n   // const handleClose = (event, reason) => {\n   //    if (reason === 'clickaway') {\n   //       return;\n   //    }\n   //    setOpen(false)\n   // }\n\n   return (\n      <Snackbar\n         anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'left',\n         }}\n         open={open}\n         autoHideDuration={3000}\n         onClose={handleClose}\n      >\n         <MySnackbarContentWrapper\n            onClose={handleClose}\n            variant=\"success\"\n            message=\"This is a success message!\"\n         />\n      </Snackbar>\n   )\n}\n"]},"metadata":{},"sourceType":"module"}